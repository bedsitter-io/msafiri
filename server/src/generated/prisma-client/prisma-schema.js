module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateLike {
  count: Int!
}

type AggregateSafari {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Like {
  id: ID!
  safari: Safari!
  user: User!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  safari: SafariCreateOneWithoutLikesInput!
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateManyWithoutSafariInput {
  create: [LikeCreateWithoutSafariInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  connect: [LikeWhereUniqueInput!]
}

input LikeCreateWithoutSafariInput {
  user: UserCreateOneWithoutLikesInput!
}

input LikeCreateWithoutUserInput {
  safari: SafariCreateOneWithoutLikesInput!
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  id_ASC
  id_DESC
}

type LikePreviousValues {
  id: ID!
}

input LikeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateInput {
  safari: SafariUpdateOneRequiredWithoutLikesInput
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateManyWithoutSafariInput {
  create: [LikeCreateWithoutSafariInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutSafariInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutSafariInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateManyWithoutUserInput {
  create: [LikeCreateWithoutUserInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  update: [LikeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LikeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LikeScalarWhereInput!]
}

input LikeUpdateWithoutSafariDataInput {
  user: UserUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithoutUserDataInput {
  safari: SafariUpdateOneRequiredWithoutLikesInput
}

input LikeUpdateWithWhereUniqueWithoutSafariInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutSafariDataInput!
}

input LikeUpdateWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateWithoutUserDataInput!
}

input LikeUpsertWithWhereUniqueWithoutSafariInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutSafariDataInput!
  create: LikeCreateWithoutSafariInput!
}

input LikeUpsertWithWhereUniqueWithoutUserInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateWithoutUserDataInput!
  create: LikeCreateWithoutUserInput!
}

input LikeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  safari: SafariWhereInput
  user: UserWhereInput
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createSafari(data: SafariCreateInput!): Safari!
  updateSafari(data: SafariUpdateInput!, where: SafariWhereUniqueInput!): Safari
  updateManySafaris(data: SafariUpdateManyMutationInput!, where: SafariWhereInput): BatchPayload!
  upsertSafari(where: SafariWhereUniqueInput!, create: SafariCreateInput!, update: SafariUpdateInput!): Safari!
  deleteSafari(where: SafariWhereUniqueInput!): Safari
  deleteManySafaris(where: SafariWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  safari(where: SafariWhereUniqueInput!): Safari
  safaris(where: SafariWhereInput, orderBy: SafariOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Safari]!
  safarisConnection(where: SafariWhereInput, orderBy: SafariOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SafariConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Safari {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
  postedBy: User
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
}

type SafariConnection {
  pageInfo: PageInfo!
  edges: [SafariEdge]!
  aggregate: AggregateSafari!
}

input SafariCreateInput {
  title: String!
  description: String!
  postedBy: UserCreateOneWithoutSafarisInput
  likes: LikeCreateManyWithoutSafariInput
}

input SafariCreateManyWithoutPostedByInput {
  create: [SafariCreateWithoutPostedByInput!]
  connect: [SafariWhereUniqueInput!]
}

input SafariCreateOneWithoutLikesInput {
  create: SafariCreateWithoutLikesInput
  connect: SafariWhereUniqueInput
}

input SafariCreateWithoutLikesInput {
  title: String!
  description: String!
  postedBy: UserCreateOneWithoutSafarisInput
}

input SafariCreateWithoutPostedByInput {
  title: String!
  description: String!
  likes: LikeCreateManyWithoutSafariInput
}

type SafariEdge {
  node: Safari!
  cursor: String!
}

enum SafariOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type SafariPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  description: String!
}

input SafariScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [SafariScalarWhereInput!]
  OR: [SafariScalarWhereInput!]
  NOT: [SafariScalarWhereInput!]
}

type SafariSubscriptionPayload {
  mutation: MutationType!
  node: Safari
  updatedFields: [String!]
  previousValues: SafariPreviousValues
}

input SafariSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SafariWhereInput
  AND: [SafariSubscriptionWhereInput!]
  OR: [SafariSubscriptionWhereInput!]
  NOT: [SafariSubscriptionWhereInput!]
}

input SafariUpdateInput {
  title: String
  description: String
  postedBy: UserUpdateOneWithoutSafarisInput
  likes: LikeUpdateManyWithoutSafariInput
}

input SafariUpdateManyDataInput {
  title: String
  description: String
}

input SafariUpdateManyMutationInput {
  title: String
  description: String
}

input SafariUpdateManyWithoutPostedByInput {
  create: [SafariCreateWithoutPostedByInput!]
  delete: [SafariWhereUniqueInput!]
  connect: [SafariWhereUniqueInput!]
  set: [SafariWhereUniqueInput!]
  disconnect: [SafariWhereUniqueInput!]
  update: [SafariUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [SafariUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [SafariScalarWhereInput!]
  updateMany: [SafariUpdateManyWithWhereNestedInput!]
}

input SafariUpdateManyWithWhereNestedInput {
  where: SafariScalarWhereInput!
  data: SafariUpdateManyDataInput!
}

input SafariUpdateOneRequiredWithoutLikesInput {
  create: SafariCreateWithoutLikesInput
  update: SafariUpdateWithoutLikesDataInput
  upsert: SafariUpsertWithoutLikesInput
  connect: SafariWhereUniqueInput
}

input SafariUpdateWithoutLikesDataInput {
  title: String
  description: String
  postedBy: UserUpdateOneWithoutSafarisInput
}

input SafariUpdateWithoutPostedByDataInput {
  title: String
  description: String
  likes: LikeUpdateManyWithoutSafariInput
}

input SafariUpdateWithWhereUniqueWithoutPostedByInput {
  where: SafariWhereUniqueInput!
  data: SafariUpdateWithoutPostedByDataInput!
}

input SafariUpsertWithoutLikesInput {
  update: SafariUpdateWithoutLikesDataInput!
  create: SafariCreateWithoutLikesInput!
}

input SafariUpsertWithWhereUniqueWithoutPostedByInput {
  where: SafariWhereUniqueInput!
  update: SafariUpdateWithoutPostedByDataInput!
  create: SafariCreateWithoutPostedByInput!
}

input SafariWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  postedBy: UserWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  AND: [SafariWhereInput!]
  OR: [SafariWhereInput!]
  NOT: [SafariWhereInput!]
}

input SafariWhereUniqueInput {
  id: ID
}

type Subscription {
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  safari(where: SafariSubscriptionWhereInput): SafariSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  safaris(where: SafariWhereInput, orderBy: SafariOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Safari!]
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  safaris: SafariCreateManyWithoutPostedByInput
  likes: LikeCreateManyWithoutUserInput
}

input UserCreateOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSafarisInput {
  create: UserCreateWithoutSafarisInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLikesInput {
  name: String!
  email: String!
  password: String!
  safaris: SafariCreateManyWithoutPostedByInput
}

input UserCreateWithoutSafarisInput {
  name: String!
  email: String!
  password: String!
  likes: LikeCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  safaris: SafariUpdateManyWithoutPostedByInput
  likes: LikeUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  update: UserUpdateWithoutLikesDataInput
  upsert: UserUpsertWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSafarisInput {
  create: UserCreateWithoutSafarisInput
  update: UserUpdateWithoutSafarisDataInput
  upsert: UserUpsertWithoutSafarisInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLikesDataInput {
  name: String
  email: String
  password: String
  safaris: SafariUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutSafarisDataInput {
  name: String
  email: String
  password: String
  likes: LikeUpdateManyWithoutUserInput
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesDataInput!
  create: UserCreateWithoutLikesInput!
}

input UserUpsertWithoutSafarisInput {
  update: UserUpdateWithoutSafarisDataInput!
  create: UserCreateWithoutSafarisInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  safaris_every: SafariWhereInput
  safaris_some: SafariWhereInput
  safaris_none: SafariWhereInput
  likes_every: LikeWhereInput
  likes_some: LikeWhereInput
  likes_none: LikeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    